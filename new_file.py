from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ContentType
from aiogram.filters import Command
from aiogram.types import Message
import os
from dotenv import load_dotenv
from aiogram.filters import BaseFilter

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')
CODEWORD = os.getenv('CODEWORD')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

class Status(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return not users[message.from_user.id]['status']

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(Command(commands="start"))
async def process_start_command(message: Message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–æ–∫—Ç–æ—Ä –°–æ—Ñ–∏!\n–≠—Ç–æ –±–æ—Ç-—Å–æ–º–Ω–æ–ª–æ–≥üò¥\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ')
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ '
    # 'users - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    if message.from_user.id not in users:
        users[message.from_user.id] = {
            'status': False,
            '–ò–ú–¢': None,
            '–†–æ—Å—Ç': 0,
            '–í–µ—Å': 0,
            '–§–ò–û': '',
            '–¥–∞': 0,
            '–Ω–µ—Ç': 0
        }
    print(users[message.from_user.id])

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text.in_([f'{CODEWORD}']))
async def process_codeword(message: Message):
    users[message.from_user.id]['status'] = True
    await message.answer("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é.")


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message(Status())
async def wrong_codeword(message: Message):
    if not users[message.from_user.id]['status']:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –§–ò–û
@dp.message()
async def process_fio(message: Message):
    if users[message.from_user.id]['status'] and not users[message.from_user.id]['–§–ò–û']:
        users[message.from_user.id]['–§–ò–û'] = message.text
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, {message.text}! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print(users[message.from_user.id])


@dp.message(Command(commands="cancel"))
async def reboot(message: Message):
    await message.answer('Working')
    users[message.from_user.id]['status'] = False
    for i in users[message.from_user.id][1:]:
        users[message.from_user.id][i] = None
    await message.answer("–í—ã —Å–±—Ä–æ—Å–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ /start")
    print(users[message.from_user.id])

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.message.register(process_start_command, Command(commands='start'))
dp.message.register(reboot, Command(commands='cancel'))
dp.message.register(process_codeword)
dp.message.register(wrong_codeword)
dp.message.register(process_fio)



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    dp.run_polling(bot)
